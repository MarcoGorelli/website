.. function:: Bernoulli({p: ...})

  * ps: probabilities *(vector [0, 1])*

  Distribution over a vector of independent Bernoulli variables. Each element
  of the vector takes on a value in ``{0, 1}``.

.. function:: Beta({a: ..., b: ...})

  * a: shape *(real (0, Infinity))*
  * b: shape *(real (0, Infinity))*

  Distribution over ``[0, 1]``

.. function:: Binomial({p: ..., n: ...})

  * p: success probability *(real [0, 1])*
  * n: number of trials *(int (>=1))*

  Distribution over the number of successes for ``n`` independent
  ``Bernoulli({p: p})`` trials.

.. function:: Categorical({ps: ..., vs: ...})

  * ps: probabilities (can be unnormalized) *(vector or real array [0,
    Infinity))*
  * vs: support *(any numpy array, Variable, or list)*
  * one_hot: if ``True``, ``sample()`` returns a one_hot sample. ``True`` by default.

  Discrete distribution over elements of ``vs`` with ``P(vs[i])`` proportional to
  ``ps[i]``.  If ``one_hot=True``, ``sample`` returns a one-hot vector.
  Else, ``sample`` returns the category selected.

.. function:: Delta({v: ...})

  * v: support element *(any)*

  Discrete distribution that assigns probability one to the single element in
  its support. This is only useful in special circumstances as sampling from
  ``Delta({v: val})`` can be replaced with ``val`` itself. Furthermore, a
  ``Delta`` distribution parameterized by a random choice should not be used
  with MCMC based inference, as doing so produces incorrect results.

.. function:: DiagNormal({mu: ..., sigma: ...})

  * mu: mean *(tensor)*
  * sigma: standard deviations *(tensor (0, Infinity))*

  A distribution over tensors in which each element is independent and
  Gaussian distributed, with its own mean and standard deviation. i.e. A
  multivariate Gaussian distribution with diagonal covariance matrix. The
  distribution is over tensors that have the same shape as the parameters ``mu``
  and ``sigma``, which in turn must have the same shape as each other.

.. function:: Exponential({a: ...})

  * a: rate *(real (0, Infinity))*

  Distribution over ``[0, Infinity]``

.. function:: Gamma({shape: ..., scale: ...})

  * shape:  *(real (0, Infinity))*
  * scale:  *(real (0, Infinity))*

  Distribution over positive reals.

.. function:: Normal({mu: ..., sigma: ...})

  * mu: mean *(real)*
  * sigma: standard deviation *(real (0, Infinity))*
  * dims: dimension of tensor *(int (>=1) array)*

  Distribution over a tensor of independent Gaussian variables.

.. function:: NormalChol(mu: ..., sigma: ..., L: ...})

  * mu: mean *(real)*
  * sigma: standard deviation *(real (0, Infinity))*
  * L: Cholesky decomposition

  A multi-variate normal distribution with arbitrary covariance sigma
  parameterized by its mean and its cholesky decomposition ``L``. Parameters
  must have dimensions <= 2.

.. function:: LogNormal({mu: ..., sigma: ...})

  * mu: mean *(vector)*
  * sigma: standard deviations *(vector (0, Infinity))*

  A distribution over probability vectors obtained by exp-transforming a random
  variable drawn from ``Normal({mu: mu, sigma: sigma})``. 

.. function:: Multinomial({ps: ..., n: ...})

  * ps: probabilities *(real array with elements that sum to one)*
  * n: number of trials *(int (>=1))*

  Distribution over counts for ``n`` independent ``Discrete({ps: ps})``
  trials.

.. function:: Poisson({mu: ...})

  * mu: mean *(real (0, Infinity))*

  Distribution over integers.

.. function:: Uniform({a: ..., b: ...})

  * a: lower bound *(real)*
  * b: upper bound (>a) *(real)*

  Continuous uniform distribution over ``[a, b]``

