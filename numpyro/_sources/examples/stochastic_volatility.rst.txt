.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_stochastic_volatility.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_stochastic_volatility.py:


Stochastic Volatility
=====================

Generative model:

.. math::

    \begin{align}
        \sigma & \sim \text{Exponential}(50) \\
        \nu & \sim \text{Exponential}(.1) \\
        s_i & \sim \text{Normal}(s_{i-1}, \sigma^{- 2}) \\
        r_i & \sim \text{StudentT}(\nu, 0, \exp(s_i))
    \end{align}

This example is from PyMC3 [1], which itself is adapted from the original experiment
from [2]. A discussion about translating this in Pyro appears in [3].

We take this example to illustrate how to use the functional interface `hmc`. However,
we recommend readers to use `MCMC` class as in other examples because it is more stable
and has more features supported.

**References:**

    1. *Stochastic Volatility Model*, https://docs.pymc.io/notebooks/stochastic_volatility.html
    2. *The No-U-Turn Sampler: Adaptively Setting Path Lengths in Hamiltonian Monte Carlo*,
       https://arxiv.org/pdf/1111.4246.pdf
    3. Pyro forum discussion, https://forum.pyro.ai/t/problems-transforming-a-pymc3-model-to-pyro-mcmc/208/14



.. image:: /examples/images/sphx_glr_stochastic_volatility_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading - https://d2hg8soec8ck9v.cloudfront.net/datasets/SP500.csv.
    Download complete.
    ==================== sigma ====================
                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
                   0.084       0.089       0.090       0.093       0.098


    ==================== nu ====================
                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
                   9.625      11.170      11.953      12.835      15.158


    ==================== volatility ====================
                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     9/21/06       0.868       0.909       0.928       0.952       1.001


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     6/21/07       0.672       0.752       0.788       0.823       0.914


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     3/19/08       1.345       1.477       1.546       1.620       1.807


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
    12/10/08       2.420       2.734       2.886       3.029       3.338


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     9/10/09       0.779       0.868       0.915       0.968       1.114


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
      6/9/10       1.299       1.474       1.542       1.614       1.832


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
      3/4/11       0.724       0.797       0.831       0.872       0.971


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
    11/23/11       1.352       1.498       1.558       1.652       1.838


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     8/23/12       0.456       0.514       0.536       0.561       0.639


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     5/29/13       0.639       0.714       0.745       0.776       0.879


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     2/25/14       0.527       0.586       0.617       0.651       0.715


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
    11/14/14       0.386       0.442       0.469       0.493       0.564


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     8/17/15       0.942       1.050       1.101       1.153       1.311


                 (p20.0)     (p40.0)     (p50.0)     (p60.0)     (p80.0)
     5/13/16       0.559       0.621       0.650       0.683       0.758


    /Users/npradhan/miniconda3/envs/numpyro/lib/python3.7/site-packages/pandas/plotting/_matplotlib/converter.py:103: FutureWarning: Using an implicitly registered datetime converter for a matplotlib plotting method. The converter was registered by pandas on import. Future versions of pandas will require you to explicitly register matplotlib converters.

    To register the converters:
            >>> from pandas.plotting import register_matplotlib_converters
            >>> register_matplotlib_converters()
      warnings.warn(msg, FutureWarning)






|


.. code-block:: default


    import argparse
    import os

    import matplotlib
    import matplotlib.dates as mdates
    import matplotlib.pyplot as plt
    import numpy as onp

    import jax.numpy as np
    import jax.random as random

    import numpyro
    import numpyro.distributions as dist
    from numpyro.examples.datasets import SP500, load_dataset
    from numpyro.infer.mcmc import hmc
    from numpyro.infer.util import initialize_model
    from numpyro.util import fori_collect

    matplotlib.use('Agg')  # noqa: E402


    def model(returns):
        step_size = numpyro.sample('sigma', dist.Exponential(50.))
        s = numpyro.sample('s', dist.GaussianRandomWalk(scale=step_size, num_steps=np.shape(returns)[0]))
        nu = numpyro.sample('nu', dist.Exponential(.1))
        return numpyro.sample('r', dist.StudentT(df=nu, loc=0., scale=np.exp(s)),
                              obs=returns)


    def print_results(posterior, dates):
        def _print_row(values, row_name=''):
            quantiles = [0.2, 0.4, 0.5, 0.6, 0.8]
            row_name_fmt = '{:>8}'
            header_format = row_name_fmt + '{:>12}' * 5
            row_format = row_name_fmt + '{:>12.3f}' * 5
            columns = ['(p{})'.format(q * 100) for q in quantiles]
            q_values = onp.quantile(values, quantiles, axis=0)
            print(header_format.format('', *columns))
            print(row_format.format(row_name, *q_values))
            print('\n')

        print('=' * 20, 'sigma', '=' * 20)
        _print_row(posterior['sigma'])
        print('=' * 20, 'nu', '=' * 20)
        _print_row(posterior['nu'])
        print('=' * 20, 'volatility', '=' * 20)
        for i in range(0, len(dates), 180):
            _print_row(np.exp(posterior['s'][:, i]), dates[i])


    def main(args):
        _, fetch = load_dataset(SP500, shuffle=False)
        dates, returns = fetch()
        init_rng_key, sample_rng_key = random.split(random.PRNGKey(args.rng_seed))
        init_params, potential_fn, constrain_fn = initialize_model(init_rng_key, model, model_args=(returns,))
        init_kernel, sample_kernel = hmc(potential_fn, algo='NUTS')
        hmc_state = init_kernel(init_params, args.num_warmup, rng_key=sample_rng_key)
        hmc_states = fori_collect(args.num_warmup, args.num_warmup + args.num_samples, sample_kernel, hmc_state,
                                  transform=lambda hmc_state: constrain_fn(hmc_state.z),
                                  progbar=False if "NUMPYRO_SPHINXBUILD" in os.environ else True)
        print_results(hmc_states, dates)

        fig, ax = plt.subplots(1, 1)
        dates = mdates.num2date(mdates.datestr2num(dates))
        ax.plot(dates, returns, lw=0.5)
        # format the ticks
        ax.xaxis.set_major_locator(mdates.YearLocator())
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
        ax.xaxis.set_minor_locator(mdates.MonthLocator())

        ax.plot(dates, np.exp(hmc_states['s'].T), 'r', alpha=0.01)
        legend = ax.legend(['returns', 'volatility'], loc='upper right')
        legend.legendHandles[1].set_alpha(0.6)
        ax.set(xlabel='time', ylabel='returns', title='Volatility of S&P500 over time')

        plt.savefig("stochastic_volatility_plot.pdf")
        plt.tight_layout()


    if __name__ == "__main__":
        assert numpyro.__version__.startswith('0.2.4')
        parser = argparse.ArgumentParser(description="Stochastic Volatility Model")
        parser.add_argument('-n', '--num-samples', nargs='?', default=600, type=int)
        parser.add_argument('--num-warmup', nargs='?', default=600, type=int)
        parser.add_argument('--device', default='cpu', type=str, help='use "cpu" or "gpu".')
        parser.add_argument('--rng_seed', default=21, type=int, help='random number generator seed')
        args = parser.parse_args()

        numpyro.set_platform(args.device)

        main(args)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  30.101 seconds)


.. _sphx_glr_download_examples_stochastic_volatility.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: stochastic_volatility.py <stochastic_volatility.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: stochastic_volatility.ipynb <stochastic_volatility.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
